Исследуя время, потребное для решения тех или иных задач, обнаружили, что с ростом "входа" (размерности матрицы, длины текста, числа объектов и т.п.) время, потребное на решение (а также объем памяти и пр.) растут устрашающим образом. Практически важным оказалось как сокращение этого времени, так и оценка, насколько для данного алгоритма может оказаться велико время (и пр.), потребное для решения задачи. Оказалось, что с ростом "входа" время работы разных частей алгоритма растет по разному, и для больших "входов" имеет смысл исследовать только "главную часть" (т.е. при малом объеме данных существенный вклад внесет рисование формы, не зависящее от объема данных, ввод их, где затраты пропорциональны объему, но с ростом объема данных, если есть часть алгоритма, время работы которой пропорционально квадрату "входа" и нет более быстро растущих зависимостей - именно эта часть и определит время его работы). Для определенности скажем, что вычисления выполняются на машине Тьюринга, хотя перенести логику рассуждения на любую воображаемую (Поста, Успенского, Маркова) или реальную машину - легко. Зависимость времени работы от длины входа (также для определенности её измеряют длиной "входа" в битах) может быть задана функцией f(x). Она может быть полиномом N-ной степени, экспонентой ex, факториалом х! и т.п. При больших х факториал будет расти быстрее экспоненты, экспонента быстрее любого полинома, полином бОльшей степени - быстрее полинома меньшей. При малых х это, вообще говоря, не выполняется, но важность представляет именно поведение при больших х.
Если задача экспоненциальна - точное решение ее возможно только для очень малых значений входа. Поэтому большой интерес представляет нахождение полиномиальных алгоритмов ее решения или доказательство того, что для данной задачи таких нет в принципе. В попытках найти решение некоторых задач было обнаружено, что, в определенном смысле, они все эквивалентны. Если существует полиномиальный алгоритм, решающий одну из них, то существует такой алгоритм для любой из них. При этом преобразование любой задачи из этого класса в решаемую требует полиномиального времени. В отличие от задач класса P, для которых найдет полиномиальный алгоритм (степерь полинома произвольна - задача со сложностью N1000000 полиномиальна!), и задач класса Е, которые не решаемы менее чем за экспоненциальное время, задачи данного класса решаются "недетерминированными машинами Тьюринга" за полиномиальное время - неясно, правда, где НДМТ производятся! НДМТ не более чем полиномиальное число раз в процессе решения сталкиваются с необходимостью выбора - и решают его превращением одной машины в несколько, каждая из которых идёт по своему пути (как в свое время в США решали вопрос выбора способа получения урана для атомной бомбы - построили по заводу для каждого способа!). Понятно, что попытка это реализовать практически приведет к появление экспоненциального - но уже числа машин. Несколько более утешительна иная интерпретация - в момент выбора появляется "оракул", который объясняет нам, который путь правильный. Утешительна она потому, что если нам удастся придумать и алгоритмизовать способ выбора правильного пути, то мы получим полиномиальный алгоритм. Таким образом, удайся нам решение хоть одной NP-задачи, мы можем надеяться на решение их всех.
Если решение задач из класса NP может быть сведено к решению задачи из определенного класса, то такой класс задач называется NP-трудным (т.е. это задачи не менее сложные, чем NP). А если они принадлежат NP - то говорят об NP-полных задачах. Если найдется полиномиальное решение хоть одной задачи этого класса - значит, все они решаемы за полином.
Практика, однако, часто довольствуется нахождением приближенного решения за разумное время.